.chapter(data-title='Automated Surveys Servlet')
  .step(data-tile='What Are We Building?', data-file='src/main/java/com/twilio/automatedsurvey/servlets/QuestionServlet.java')
    :markdown
      ## Automated Survey

      Have you ever wondered how to create an automated survey that can be answered over phone or SMS?

      This tutorial will show how to do it using Twilio API.

      #### Here's how it works at a high level

      ![Automated Survey Diagram](//s3.amazonaws.com/howtodocs/automated-survey.png)

      1. The end user calls or sends an SMS to the survey phone number.

      1. Twilio gets the call or text and makes an HTTP request to your application asking for instructions on how to respond.

      1. Your web application instructs Twilio (using [TwiML](//www.twilio.com/docs/api/twiml))
         to [`Gather`](//www.twilio.com/docs/api/twiml/gather) or
         [`Record`](//www.twilio.com/docs/api/twiml/record) the user input over the phone,
         and prompt for text input with [`Message`](//www.twilio.com/docs/api/twiml/sms/message)
         if you are using SMS.

      1. After each question, Twilio makes another request to your server with the user's input, which your application stores on its database.

      1. After storing the answer, our server will instruct Twilio to [`Redirect`](//www.twilio.com/docs/api/twiml/redirect)
         the user to the next question or finish the survey.

      ---
      **See Also:**
      * [Getting started with Twilio Java](//www.twilio.com/docs/java/install)
      * [TwiML: the Twilio Markup Language](//www.twilio.com/docs/api/twiml).

  .step(data-tile='Create a Survey',
    data-file='src/main/java/com/twilio/automatedsurvey/servlets/SurveyServlet.java',
    data-highlight='44-44, 67-71')
    :markdown
      ## Creating a Survey

      In order to perform automated surveys we first need to set up the
      questions. For your convenience, the application's
      repository already includes one survey. If the database is configured correctly
      every time that the app receives a request for a survey, it will
      create a new survey registration.

      You can modify the questions from the survey by editing the
      [survey.json](//github.com/TwilioDevEd/automated-survey-servlets/blob/master/src/main/resources/survey.json)
      file located in the root of the repository and re-running the app.

      We want users to take our survey, so next we will implement
      the handler for SMS and calls.

   .step(data-tile='The Interview Loop',
    data-file='src/main/java/com/twilio/automatedsurvey/servlets/SurveyServlet.java', data-highlight='33-54')
    :markdown
      ## The Interview Loop

      It is helpful to visualize your interaction with a user during a survey as a loop.
      The chart below shows how that interaction will be handled. (click to enlarge):

      ![Survey Flow Chart](//s3.amazonaws.com/howtodocs/flowchart.png)

      The user can answer your survey's questions over the phone using either their phone's keypad or by voice input.
      After each interaction, Twilio will make an HTTP request to your web application with either the string of
      keys the user pressed or a URL to a recording of their voice input.

      For SMS surveys the user will answer questions just by replying
      with another SMS to your Twilio number where we got the question from.

      It's up to the application to process, store and respond to the user's input.

      Let's dive into this flow to see how it actually works.

  .step(data-file='src/main/java/com/twilio/automatedsurvey/servlets/SurveyServlet.java',
    data-title='Configuring a Twilio Number'
    data-highlight='33-54')
    :markdown
      ## Configuring a Twilio Number

      To initiate the interview process, we need to configure one of our [Twilio numbers][numbers]
      to send our web application an HTTP request when we get an incoming call or text.

      [Click on one of your numbers][numbers] and configure Voice and Message URLs to point to route
      `/survey` using HTTP GET.

      ![Configuring a Twilio Number](//s3.amazonaws.com/howtodocs/number-config.png)

      [numbers]: //www.twilio.com/user/account/phone-numbers/incoming

  .step(data-file='src/main/java/com/twilio/automatedsurvey/servlets/SurveyServlet.java',
    data-title="Responding To A Twilio Request"
    data-highlight='33-38, 43-54, 56-65')
    :markdown
      ## Responding to a Twilio Request

      Right after receiving a call or an SMS, Twilio will send a request to the URL specified on
      the number's configuration.

      The endpoint will then process the request. In case the request is not an answer from a previous question
      the application will build and return a welcome message to the user. For phone users, the built
      message will contain a `Say` verb with the message or a `Message` Verb for SMS.

      It will also include a `Redirect` verb to the question's endpoint to continue with the survey flow.

      ---

      **See Also:**
      * [Twilio webhooks](//www.twilio.com/platform/webhooks)
      * [TwiML Voice: Your Response](//www.twilio.com/docs/api/twiml/your_response)
      * [TwiML SMS: Your Response](//www.twilio.com/docs/api/twiml/sms/your_response)
      * [TwiML Voice: <Say>](//www.twilio.com/docs/api/twiml/say)
      * [TwiML SMS: <Message>](//www.twilio.com/docs/api/twiml/sms/message)
      * [TwiML Voice: <Redirect>](//www.twilio.com/docs/api/twiml/redirect)
      * [TwiML SMS: <Redirect>](//www.twilio.com/docs/api/twiml/sms/redirect)

  .step(data-file='src/main/java/com/twilio/automatedsurvey/servlets/QuestionServlet.java',
    data-highlight='29-55')
    :markdown
      ## Question Controller

      This endpoint will return the `Question` specified on the request. If no request is specified, It will return the
      Survey's first question.

      Each type of question and interaction (Call/SMS) will produce different instructions on how to proceed.
      For instance we can record voice or gather a key press during a call, but we can't do the same for text messages.

      `AbstractTwiMLQuestionFactory.getInstance` solves that problem. It will return a different type of factory that will know
      how to build responses depending on wether it's a SMS or a Call originated request.

      When the user is interacting over SMS we don't have something like an ongoing call session with a well defined state.
      It becomes harder to know if an SMS is answering question 2 or 20, since all requests will be fired to `/survey` main endpoint.

      To solve that, we're storing in the HTTP session the ids of Survey and Question that are being returned to be reused on later
      SMS requests.

      Let's see how the response is built.

  .step(data-file='src/main/java/com/twilio/automatedsurvey/servlets/TelephoneTwiMLQuestionFactory.java',
    data-highlight='32-70')
    :markdown
      ## Building Our TwiML Verbs

      If the question is of "numeric" or "yes-no" kind then we use the
      [`<Gather>`](//www.twilio.com/docs/api/twiml/gather)
      verb. However, if we expect the user to record an answer we use the
      [`<Record>`](//www.twilio.com/docs/api/twiml/record)
      verb. Both verbs take an `action` attribute and a `method`
      attribute.

      Twilio will use both attributes to define our response's endpoint that will be used as callback. That endpoint
      will be responsible to receive and store the caller's answer.

      During the Record verb creation, we also ask for a [Transcription](//www.twilio.com/docs/api/rest/transcription).
      Twilio will process the record and extract useful text, making a request to our response endpoint when transcription is done.

      Now let's see what to do with the response.
      ---

      **See Also:**
      * [TwiML Voice: <Gather>](//www.twilio.com/docs/api/twiml/gather)
      * [TwiML Voice: <Record>](//www.twilio.com/docs/api/twiml/record)

  .step(data-file='src/main/java/com/twilio/automatedsurvey/survey/Survey.java',
    data-highlight='61-77')
    :markdown
      ## Handling responses.

      After the user has finished speaking and pressing keys, Twilio just sends a request telling what
      happened and asking for further instructions.

      On `Survey.answerCall` and `Survey.answerSMS` we extract from a Map containing the request parameters the 
      information needed to answer the question. 

      Recovered parameters vary according to what we asked on the questions, they can be:

      * `Body` contains the text message from answer over SMS.
      * `Digits` contains the keys pressed for a numeric question.
      * `RecordingUrl` contains the URL for listening a recorded message.
      * `TranscriptionText` contains the result of a recording's transcription.

      After answering a question, the `SurveyController` redirects to our `QuestionServlet`, which will
      ask the next question on the loop.

      Now, let's see how to visualize the results.

      ---

      **See Also:**
      * [TwiML Voice: Your Response](//www.twilio.com/docs/api/twiml/your_response)
      * [TwiML SMS: Your Response](//www.twilio.com/docs/api/twiml/sms/your_response)

  .step(data-file='src/main/java/com/twilio/automatedsurvey/servlets/IndexServlet.java',
    data-highlight='25-30')
    :markdown
      ## Displaying the Survey's Results

      For this route we simply query the database using a JPA query
      and then display the information within JSP page. We display a list
      of surveys with their respective questions and answers.

      You can access this page in the applications root route `/`.

  .step
    :markdown
      ## Where to next?

      That's it!

      If you have configured one of your Twilio
      numbers to the application built in this tutorial you should be
      able to take the survey and see the results under the root route of
      the application. We hope you found this sample application
      useful.  If you're a Java developer working with Twilio, you
      might enjoy these other tutorials:

      ### [SMS and MMS Notifications](//www.twilio.com/docs/tutorials/walkthrough/server-notifications/java/servlets)
      Never miss another server outage. Learn how to build a server notification system that will alert
      all administrators via SMS when a server outage occurs.

      ### [Click to Call](//www.twilio.com/docs/tutorials/walkthrough/click-to-call/java/servlets)
      Click-to-call enables your company to convert web traffic into phone calls with the click of a button.

      ### Did this help?
      Thanks for checking this tutorial out! If you have any feedback to share with us,
      we'd love to hear it.[Contact support](//www.twilio.com/help/contact) to let us know what you think.
